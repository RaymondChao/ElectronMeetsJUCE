// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: audiodevicemanager.proto

#ifndef PROTOBUF_audiodevicemanager_2eproto__INCLUDED
#define PROTOBUF_audiodevicemanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace nativecommand {
class DeviceName;
class DeviceNameDefaultTypeInternal;
extern DeviceNameDefaultTypeInternal _DeviceName_default_instance_;
}  // namespace nativecommand

namespace nativecommand {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_audiodevicemanager_2eproto();
void protobuf_InitDefaults_audiodevicemanager_2eproto();

// ===================================================================

class DeviceName : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nativecommand.DeviceName) */ {
 public:
  DeviceName();
  virtual ~DeviceName();

  DeviceName(const DeviceName& from);

  inline DeviceName& operator=(const DeviceName& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceName& default_instance();

  static inline const DeviceName* internal_default_instance() {
    return reinterpret_cast<const DeviceName*>(
               &_DeviceName_default_instance_);
  }

  void Swap(DeviceName* other);

  // implements Message ----------------------------------------------

  inline DeviceName* New() const PROTOBUF_FINAL { return New(NULL); }

  DeviceName* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeviceName& from);
  void MergeFrom(const DeviceName& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeviceName* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:nativecommand.DeviceName)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_audiodevicemanager_2eproto_impl();
  friend void  protobuf_AddDesc_audiodevicemanager_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_audiodevicemanager_2eproto();
  friend void protobuf_ShutdownFile_audiodevicemanager_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceName

// string name = 1;
inline void DeviceName::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeviceName::name() const {
  // @@protoc_insertion_point(field_get:nativecommand.DeviceName.name)
  return name_.GetNoArena();
}
inline void DeviceName::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nativecommand.DeviceName.name)
}
#if LANG_CXX11
inline void DeviceName::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:nativecommand.DeviceName.name)
}
#endif
inline void DeviceName::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nativecommand.DeviceName.name)
}
inline void DeviceName::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nativecommand.DeviceName.name)
}
inline ::std::string* DeviceName::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:nativecommand.DeviceName.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeviceName::release_name() {
  // @@protoc_insertion_point(field_release:nativecommand.DeviceName.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceName::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:nativecommand.DeviceName.name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace nativecommand

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_audiodevicemanager_2eproto__INCLUDED
